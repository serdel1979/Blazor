@page "/empleado"
@page "/empleado/{Id:int}"

@using Blazor.Shared;
@using Blazor.Client.Services;

@inject IEmpleadoService empleadoService;
@inject IDepartamentoService departamentoService;
@inject NavigationManager naviate;

<h3>@Titulo</h3>

<EditForm Model="empleado" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="mb-3">
        <label class="form-label">Nombre Completo</label>
        <InputText class="form-control" @bind-Value="empleado.NombreCompleto"></InputText>
        <ValidationMessage For="@(() => empleado.NombreCompleto)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Departamento</label>
        <InputSelect class="form-select" @bind-Value="empleado.IdDepartamento">
            <option value="0">--Seleccionar Departamento--</option>
            @foreach (var item in listaDepartamentos)
            {
                <option value="@item.Id">@item.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => empleado.IdDepartamento)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Sueldo</label>
        <InputNumber class="form-control" @bind-Value="empleado.Sueldo"></InputNumber>
        <ValidationMessage For="@(() => empleado.Sueldo)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Fecha de contrato</label>
        <InputDate class="form-control" @bind-Value="empleado.FechaContrato"></InputDate>
        <ValidationMessage For="@(() => empleado.FechaContrato)"></ValidationMessage>
    </div>

    <button class="btn btn-primary" type="submit">
        @btnTexto
    </button>

    <a class="btn btn-warning" href="empleados">
        Volver
    </a>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; } = 0;

    string Titulo = string.Empty;
    string btnTexto = string.Empty;

    EmpleadoDTO empleado = new EmpleadoDTO();
    List<DepartamentoDTO>? listaDepartamentos = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Id != 0)
            {
                empleado = await empleadoService.GetById(Id);
                btnTexto = "Actualizar empleado";
                Titulo = "Editar empleado";
            }
            else
            {
                empleado.FechaContrato = DateTime.Today;
                btnTexto = "Guardar empleado";
            }
            listaDepartamentos = await departamentoService.Lista();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing component: {ex.Message}");
            // Manejo de errores adicional si es necesario
        }
    }

    private async Task OnValidSubmit()
    {
        try
        {
            EmpleadoDTO empl = new EmpleadoDTO();
            if (Id == 0)
            {
                empl = await empleadoService.Create(empleado);
            }
            else
            {
                empl = await empleadoService.Update(Id, empleado);
            }

            if (empl.Id != 0)
            {
                naviate.NavigateTo("/empleados");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error on form submission: {ex.Message}");
            // Manejo de errores adicional si es necesario
        }
    }
}